# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow lets you compile your Go project using a SLSA3 compliant builder.
# This workflow will generate a so-called "provenance" file describing the steps
# that were performed to generate the final binary.
# The project is an initiative of the OpenSSF (openssf.org) and is developed at
# https://github.com/slsa-framework/slsa-github-generator.
# The provenance file can be verified using https://github.com/slsa-framework/slsa-verifier.
# For more information about SLSA and how it improves the supply-chain, visit slsa.dev.

name: SLSA releaser
on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

permissions: read-all
env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
jobs:
  # Generate ldflags dynamically.
  # Optional: only needed for ldflags.
  args:
    runs-on: ubuntu-latest
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.ldflags.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
    steps:
      - id: checkout
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # tag=v2.3.4
        with:
          fetch-depth: 0
      - id: ldflags
        run: |
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"
          echo "commit=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          echo "version=$(git describe --tags --always --dirty | cut -c2-)" >> "$GITHUB_OUTPUT"
          echo "tree-state=$(if git diff --quiet; then echo "clean"; else echo "dirty"; fi)" >> "$GITHUB_OUTPUT"
  build:
    permissions:
      id-token: write # To sign.
      contents: write # To upload release assets.
      actions: read   # To read workflow path.
    strategy:
      matrix:
        os:
          - linux
          - windows
          - darwin
        arch:
          - amd64
          - arm64
    needs: args
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.1.0
    with:
      go-version: 1.23
      private-repository: true
      config-file: .slsa-goreleaser/${{matrix.os}}-${{matrix.arch}}.yml
      evaluated-envs: "COMMIT_DATE:${{needs.args.outputs.commit-date}}, COMMIT:${{needs.args.outputs.commit}}, VERSION:${{needs.args.outputs.version}}, TREE_STATE:${{needs.args.outputs.tree-state}}"
      # =============================================================================================================
      #     Optional: For more options, see https://github.com/slsa-framework/slsa-github-generator#golang-projects
      # =============================================================================================================


  build-windows-image:
    permissions:
      contents: read
      packages: write
    needs: [args]
    runs-on: windows-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v2.3.4

      - name: Enable Docker experimental features
        shell: pwsh
        run: |
          # Enable experimental CLI features for manifest commands
          $dockerConfig = @{
            experimental = "enabled"
          } | ConvertTo-Json

          $configDir = "$env:USERPROFILE\.docker"
          if (-not (Test-Path $configDir)) {
            New-Item -ItemType Directory -Path $configDir -Force
          }

          $dockerConfig | Out-File -FilePath "$configDir\config.json" -Encoding UTF8

      - name: Authenticate Docker
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and Push Windows Docker image
        shell: pwsh
        run: |
          # Build with multiple tags from metadata (newline separated)
          $tags = "${{ steps.meta.outputs.tags }}" -split "`n"
          $clean_tags = @()

          foreach ($tag in $tags) {
            $tag = $tag.Trim()
            if ($tag -ne "") {
              $clean_tags += $tag
            }
          }

          # Build with labels from metadata (newline separated)
          $labels = "${{ steps.meta.outputs.labels }}" -split "`n"
          $docker_labels = @()
          foreach ($label in $labels) {
            $label = $label.Trim()
            if ($label -ne "") {
              $docker_labels += "--label"
              $docker_labels += $label
            }
          }

          $docker_tags = @()
          foreach ($tag in $clean_tags) {
            $docker_tags += "-t"
            $docker_tags += "$tag-win"
          }

          # Build Windows image with temporary tags using array parameters
          $build_args = @(
            "docker", "build",
            "--platform", "windows/amd64",
            "-f", "Dockerfile.windows"
          )
          $build_args += $docker_tags
          $build_args += $docker_labels
          $build_args += @(
            "--build-arg", "VERSION=${{ needs.args.outputs.version }}",
            "--build-arg", "GIT_COMMIT=${{ needs.args.outputs.commit }}",
            "--build-arg", "BUILD_DATE=${{ needs.args.outputs.commit-date }}",
            "--build-arg", "GIT_TREE_STATE=${{ needs.args.outputs.tree-state }}",
            "."
          )

          Write-Host "Building Windows image with command: $($build_args -join ' ')"
          & $build_args[0] $build_args[1..($build_args.Length-1)]
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Docker build failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }

          # Push Windows tags
          foreach ($tag in $clean_tags) {
            Write-Host "Pushing Windows image: $tag-win"
            docker push "$tag-win"
          }

      - name: Export digest
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "${{ runner.temp }}/digests" -Force
          $digest = "${{ steps.build.outputs.digest }}"
          $digestFile = $digest -replace "sha256:", ""
          New-Item -ItemType File -Path "${{ runner.temp }}/digests/$digestFile" -Force

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-windows-amd64
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  build-linux-image:
    permissions:
      contents: read
      packages: write
    needs: [args]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout the repository
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v2.3.4

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Authenticate Docker
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          build-args: |
            VERSION=${{ needs.args.outputs.version }}
            GIT_COMMIT=${{ needs.args.outputs.commit }}
            BUILD_DATE=${{ needs.args.outputs.commit-date }}
            GIT_TREE_STATE=${{ needs.args.outputs.tree-state }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    permissions:
      contents: read
      packages: write
    needs: [build-linux-image, build-windows-image, args]
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Authenticate Docker
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Create manifest list and push
        id: build
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

      - name: Output image
        run: |
          # NOTE: Set the image as an output because the `env` context is not
          # available to the inputs of a reusable workflow call.
          image_name=$(echo "${{ env.REGISTRY_IMAGE }}" | tr '[:upper:]' '[:lower:]')
          echo "image=$image_name" >> "$GITHUB_OUTPUT"

  # This step calls the container workflow to generate provenance and push it to
  # the container registry.
  provenance:
    needs: [merge]
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.merge.outputs.image }}
      digest: ${{ needs.merge.outputs.digest }}
      registry-username: ${{ github.actor }}
      private-repository: true
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
